"""
Django settings for ArenaGG project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
import environ
import socket


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Inicializar django-environ
env = environ.Env(
    DEBUG=(bool, False)  # Define DEBUG como booleano
)

# Cargar las variables desde el archivo .env
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

# Configuración de DEBUG
DEBUG = env("DEBUG")


# Configuración del correo con Mailpit
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = env("EMAIL_HOST", default="mailpit")
EMAIL_PORT = env.int("EMAIL_PORT", default=1025)
EMAIL_USE_TLS = False
EMAIL_USE_SSL = False
EMAIL_HOST_USER = env("EMAIL_HOST_USER", default="")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD", default="")
DEFAULT_FROM_EMAIL = "administracion@arenagg.com"
SUPPORT_EMAIL = "soporte@arenagg.com"

CELERY_BROKER_URL = env("CELERY_BROKER_URL", default="")


CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Europe/Madrid'  # o tu zona

# Opcional, para controlar la periodicidad desde el admin
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY", default="")

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'web.apps.WebConfig',
    'debug_toolbar',
    'rest_framework',
    'django_celery_beat',
    'celery',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',

]

ROOT_URLCONF = 'ArenaGG.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ArenaGG.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        # Especifica el backend de la base de datos que se utilizará. En este caso, estamos usando PostgreSQL.
        "ENGINE": "django.db.backends.postgresql",  # Backend de PostgreSQL

        # Nombre de la base de datos que se utilizará. En este caso, la base de datos se llama "django_db".
        "NAME": "django_db",  # Nombre de la base de datos

        # Usuario que se usará para conectarse a la base de datos.
        "USER": "postgres",  # Usuario de la base de datos

        # Contraseña del usuario para acceder a la base de datos.
        "PASSWORD": "password",  # Contraseña del usuario de la base de datos

        # Dirección del servidor de la base de datos. Si estás usando Docker, el valor podría ser el nombre del servicio, como "db".
        "HOST": "db",  # Dirección del host de la base de datos

        # Puerto en el que se ejecuta la base de datos. El valor predeterminado de PostgreSQL es 5432.
        "PORT": "5432",  # Puerto donde la base de datos escucha
    }
}

# Obtenemos el nombre del host (máquina local) y sus direcciones IP asociadas
hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())

# Creamos una lista de direcciones IP internas agregando '.1' al final de cada dirección
INTERNAL_IPS = [ip[: ip.rfind(".")] + ".1" for ip in ips] + ["127.0.0.1", "localhost"]

# Si conseguimos la ip de nuestro contenedor docker con el comando (docker inspect django_web) y cogemos la ip del ("Gateway") podemos ponerlo de la siguiente manera
# INTERNAL_IPS = ["172.19.0.1", "127.0.0.1", "localhost"]

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'es'

TIME_ZONE = 'Europe/Madrid'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'web/static'),  # Aquí van imágenes como logotipos, fondos, etc.
]

# Archivos subidos por usuarios (avatars, imágenes de perfil, etc.)
MEDIA_URL = '/media/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'web/static/media')  # Los archivos subidos se guardarán en "media/"

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Definir la URL a la que los usuarios serán redirigidos si intentan acceder a una página que requiere autenticación
LOGIN_URL = '/accounts/login/'

# Definir la URL a la que el usuario será redirigido después de iniciar sesión con éxito
LOGIN_REDIRECT_URL = '/'

# Definir la URL a la que el usuario será redirigido después de cerrar sesión
LOGOUT_REDIRECT_URL = '/accounts/logout/'


CSRF_TRUSTED_ORIGINS = [
    'https://arenagg.aarongutierrez.tech',
]

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
