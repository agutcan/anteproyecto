# Generated by Django 5.1.7 on 2025-03-18 12:19

from django.db import migrations

# Función que elimina todos los datos de la base de datos de la aplicación
from django.db import migrations
from django.shortcuts import get_object_or_404
from django.utils import timezone


def eliminar_datos(apps, schema_editor):
    # Obtener los modelos de la aplicación 'web'
    Game = apps.get_model('web', 'Game')
    Tournament = apps.get_model('web', 'Tournament')
    Team = apps.get_model('web', 'Team')
    Player = apps.get_model('web', 'Player')
    Match = apps.get_model('web', 'Match')
    MatchResult = apps.get_model('web', 'MatchResult')
    TournamentTeam = apps.get_model('web', 'TournamentTeam')
    MatchLog = apps.get_model('web', 'MatchLog')
    User = apps.get_model('auth', 'User')  # Modelo User de Django
    Reward = apps.get_model('web', 'Reward')
    Redemption = apps.get_model('web', 'Redemption')

    # Eliminar registros de log de partidos
    MatchLog.objects.all().delete()
    # Eliminar los resultados de los partidos
    MatchResult.objects.all().delete()
    # Eliminar los partidos
    Match.objects.all().delete()
    # Eliminar equipos de los torneos
    TournamentTeam.objects.all().delete()
    # Eliminar los torneos
    Tournament.objects.all().delete()
    # Eliminar los jugadores
    Player.objects.all().delete()
    # Eliminar los equipos
    Team.objects.all().delete()
    # Eliminar los juegos
    Game.objects.all().delete()
    # Eliminar los usuarios
    User.objects.all().delete()
    # Eliminar las recomponsas
    Reward.objects.all().delete()
    # Eliminar las reclamaciones
    Redemption.objects.all().delete()

# Función que pobla la base de datos con datos de prueba
def poblar_datos(apps, schema_editor):
    # Obtener los modelos de la aplicación 'web'
    Game = apps.get_model('web', 'Game')
    Tournament = apps.get_model('web', 'Tournament')
    Team = apps.get_model('web', 'Team')
    Player = apps.get_model('web', 'Player')
    Match = apps.get_model('web', 'Match')
    MatchResult = apps.get_model('web', 'MatchResult')
    TournamentTeam = apps.get_model('web', 'TournamentTeam')
    User = apps.get_model('auth', 'User')  # Modelo User de Django
    MatchLog = apps.get_model('web', 'MatchLog')  # Modelo para los logs
    Reward = apps.get_model('web', 'Reward')
    Redemption = apps.get_model('web', 'Redemption')

    # Función para crear registros de eventos en el log
    def log_event(match, team, player, event):
        """Función para crear un log de eventos en la partida."""
        log = MatchLog(
            match=match,
            team=team,
            player=player,
            event=event
        )
        log.save()  # Guarda el log en la base de datos

    # Crear usuarios
    users = [
        User(username="player1", password="password1", first_name="John", last_name="Doe", email="john@example.com"),
        User(username="player2", password="password2", first_name="Jane", last_name="Doe", email="jane@example.com"),
        User(username="player3", password="password3", first_name="Alice", last_name="Smith", email="alice@example.com"),
        User(username="player4", password="password4", first_name="Bob", last_name="Johnson", email="bob@example.com"),
        User(username="player5", password="password5", first_name="Esther", last_name="Smith", email="esther@example.com"),
        User(username="player6", password="password6", first_name="Martin", last_name="Johnson", email="Martin@example.com"),
        User(username="player7", password="password7", first_name="Rex", last_name="Doe", email="Rex@example.com"),
        User(username="player8", password="password8", first_name="Leo", last_name="Doe", email="Leo@example.com"),
    ]
    User.objects.bulk_create(users)  # Crear todos los usuarios de una vez

    # Crear juegos
    games = [
        Game(name="Valorant", genre="Shooter táctico"),
        Game(name="League of Legends", genre="MOBA"),
        Game(name="Counter-Strike 2", genre="Shooter táctico")
    ]
    Game.objects.bulk_create(games)  # Guardar todos los juegos de una vez

    # Crear equipos
    teams = [
        Team(name="Los Guerreros del Sol"),
        Team(name="La Legión Oscura"),
        Team(name="Los Centinelas del Reino"),
        Team(name="Héroes de la Alianza")
    ]
    Team.objects.bulk_create(teams)  # Guardar todos los equipos de una vez

    # Crear jugadores
    players = [
        Player(user=users[0], team=teams[0], role='Premium', games_played=100, games_won=70, coins=4550),
        Player(user=users[1], team=teams[1], games_played=80, games_won=50, mmr=90, renombre=40, coins=3000),
        Player(user=users[2], team=teams[2], country='AR', role='Premium', games_played=120, games_won=90, coins=2000),
        Player(user=users[3], team=teams[3], country='BR', games_played=90, games_won=65, renombre=100, coins=1000),
        Player(user=users[4], team=teams[0], games_played=50, games_won=25, coins=500),
        Player(user=users[5], team=teams[1], games_played=90, games_won=65, mmr=80),
        Player(user=users[6], team=teams[2], country='AR', games_played=30, games_won=25, renombre=90),
        Player(user=users[7], team=teams[3], country='BR', games_played=90, games_won=50),
    ]
    Player.objects.bulk_create(players)  # Guardar todos los jugadores de una vez


    # Crear torneos
    tournaments = [
        Tournament(name="Torneo Internacional de Valorant", game=games[0], start_date="2025-04-01", end_date="2025-04-30", status="upcoming", prize_pool=5000.00, created_by=users[0]),
        Tournament(name="Campeonato Mundial de League of Legends", game=games[1], start_date="2025-05-01", end_date="2025-05-15", status="upcoming", prize_pool=10000.00, created_by=users[1])
    ]
    Tournament.objects.bulk_create(tournaments)  # Guardar todos los torneos de una vez

    # Asignar equipos a torneos
    tournament_teams = [
        TournamentTeam(tournament=tournaments[0], team=teams[0], seed=1),
        TournamentTeam(tournament=tournaments[0], team=teams[1], seed=2),
        TournamentTeam(tournament=tournaments[1], team=teams[2], seed=1),
        TournamentTeam(tournament=tournaments[1], team=teams[3], seed=2)
    ]
    TournamentTeam.objects.bulk_create(tournament_teams)  # Guardar todos los equipos en los torneos

    # Crear partidos entre equipos
    matches = [
        Match(tournament=tournaments[0], round=1, team1=teams[0], team2=teams[1], scheduled_at="2025-04-05T10:00:00", status="pending"),
        Match(tournament=tournaments[1], round=1, team1=teams[2], team2=teams[3], scheduled_at="2025-05-02T10:00:00", status="pending")
    ]
    Match.objects.bulk_create(matches)  # Guardar todos los partidos de una vez

    # Llamar a update_winrate() para cada jugador creado y registrar el log
    for player in players:
        player.winrate = (player.games_won / player.games_played) * 100 if player.games_played > 0 else 0
        player.save()
        log_event(matches[0], player.team, player,
                  f"Winrate actualizado: {player.winrate:.2f}%")  # Registrar evento de actualización

    # Crear resultados de partidos (ejemplo)
    match_results = [
        MatchResult(match=matches[0], winner=teams[0], team1_score=2, team2_score=1),
        MatchResult(match=matches[1], winner=teams[2], team1_score=3, team2_score=0)
    ]
    MatchResult.objects.bulk_create(match_results)  # Guardar todos los resultados de los partidos

    # Crear logs para los partidos
    log_event(matches[0], teams[0], None, "Partido programado: 2-1 vs Los Guerreros del Sol vs La Legión Oscura")
    log_event(matches[1], teams[2], None, "Partido programado: 3-0 vs Los Centinelas del Reino vs Héroes de la Alianza")

    # Crear recompensas
    rewards = [
        Reward(name="Premium Skin", description="Una skin exclusiva para tu personaje en el juego.",
               coins_cost=500, stock=100, is_active=True,
               created_at=timezone.now(), updated_at=timezone.now()),
        Reward(name="Double XP Boost", description="Duplica tu experiencia ganada en partidas durante 24 horas.",
               coins_cost=300, stock=50, is_active=True,
               created_at=timezone.now(), updated_at=timezone.now()),
        Reward(name="VIP Access", description="Accede a eventos VIP exclusivos dentro del juego.",
               coins_cost=1000, stock=20, is_active=True,
               created_at=timezone.now(), updated_at=timezone.now())
    ]

    # Usar bulk_create para insertar las recompensas de forma eficiente
    Reward.objects.bulk_create(rewards)

    redemptions = [
        Redemption(user=users[0], reward=rewards[0], redeemed_at=timezone.now()),
        Redemption(user=users[1], reward=rewards[1], redeemed_at=timezone.now()),
        Redemption(user=users[2], reward=rewards[2], redeemed_at=timezone.now())
    ]

    # Usar bulk_create para insertar las redenciones de forma eficiente
    Redemption.objects.bulk_create(redemptions)

    # Creación de usuarios para la administración
    User.objects.create_user(username='prueba', password='prueba')  # Crear un usuario normal
    User.objects.create_superuser(username='admin', email='admin@example.com', password='admin')  # Crear un superusuario

    players = [
        Player(user=get_object_or_404(User, username="prueba")),
        Player(user=get_object_or_404(User, username="admin")),
    ]
    Player.objects.bulk_create(players)  # Guardar todos los jugadores de una vez

class Migration(migrations.Migration):

    dependencies = [
        ('web', '0009_tournament_description'),
    ]

    # Operaciones que se ejecutan: poblar los datos y definir cómo eliminarlos
    operations = [
        migrations.RunPython(poblar_datos, reverse_code=eliminar_datos),  # Función para poblar y eliminar datos
    ]

