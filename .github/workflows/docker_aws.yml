name: docker&aws

on:
  push:
    branches: [ main ]
    paths:
      - app/**
  pull_request:
    branches: [ main ]
    paths:
      - app/**

env:
  IMAGE_NAME: anteproyecto
  IMAGE_TAG: latest
  COMPOSE: docker-compose.yml

jobs:
  build:
    name: build and push Docker image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
          
      - name: Login to DockerHub
        uses: docker/login-action@v3 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true 
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

  aws:
    name: Deploy image to aws
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: copy docker compose via ssh key
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.AWS_HOSTNAME }}
        username: ${{ secrets.AWS_USERNAME }}
        port: ${{ secrets.PORT }}
        key: ${{ secrets.AWS_PRIVATEKEY }}
        source: ${{ env.COMPOSE }}
        target: /home/ubuntu
    - name: script deploy docker services
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AWS_HOSTNAME }}
        username: ${{ secrets.AWS_USERNAME }}
        key: ${{ secrets.AWS_PRIVATEKEY }}
        port: ${{ secrets.PORT }}
        script: |
            sleep 30
            docker compose down api
            docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            docker compose up -d traefik db whoami 
            docker compose up -d api

  test:
    name: Run Django tests before deploy
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: user
          POSTGRES_PASSWORD: pass
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
  
    env:
      DATABASE_NAME: testdb
      DATABASE_USER: user
      DATABASE_PASSWORD: pass
      DATABASE_HOST: localhost
      DATABASE_PORT: 5432
      DEBUG: "False"
  
    steps:
      - uses: actions/checkout@v4
  
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
  
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
  
      - name: Run migrations
        run: python manage.py migrate
  
      - name: Run tests
        run: python manage.py test
